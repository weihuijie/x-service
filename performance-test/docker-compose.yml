version: '3.8'

services:
  # 高性能IoTDB集群
  iotdb-node1:
    image: apache/iotdb:1.3.0-cluster
    container_name: iotdb_node1
    ports:
      - "6667:6667"
      - "10710:10710"
      - "10720:10720"
      - "10730:10730"
      - "10740:10740"
      - "10750:10750"
      - "10760:10760"
    environment:
      - IoTDB_CONF=/iotdb/conf
      - cn_internal_address=iotdb-node1
      - cn_internal_port=10710
      - cn_consensus_port=10720
      - cn_seed_config_node=iotdb-node1:10710
      - dn_internal_address=iotdb-node1
      - dn_internal_port=10730
      - dn_consensus_port=10740
      - dn_seed_config_node=iotdb-node1:10710
      - dn_data_region_consensus_port=10750
      - dn_schema_region_consensus_port=10760
    volumes:
      - iotdb_data1:/iotdb/data
      - ./iotdb-cluster-config:/iotdb/conf

  iotdb-node2:
    image: apache/iotdb:1.3.0-cluster
    container_name: iotdb_node2
    ports:
      - "6668:6667"
    environment:
      - cn_internal_address=iotdb-node2
      - cn_internal_port=10710
      - cn_consensus_port=10720
      - cn_seed_config_node=iotdb-node1:10710
      - dn_internal_address=iotdb-node2
      - dn_internal_port=10730
      - dn_consensus_port=10740
      - dn_seed_config_node=iotdb-node1:10710
      - dn_data_region_consensus_port=10750
      - dn_schema_region_consensus_port=10760
    volumes:
      - iotdb_data2:/iotdb/data
    depends_on:
      - iotdb-node1

  iotdb-node3:
    image: apache/iotdb:1.3.0-cluster
    container_name: iotdb_node3
    ports:
      - "6669:6667"
    environment:
      - cn_internal_address=iotdb-node3
      - cn_internal_port=10710
      - cn_consensus_port=10720
      - cn_seed_config_node=iotdb-node1:10710
      - dn_internal_address=iotdb-node3
      - dn_internal_port=10730
      - dn_consensus_port=10740
      - dn_seed_config_node=iotdb-node1:10710
      - dn_data_region_consensus_port=10750
      - dn_schema_region_consensus_port=10760
    volumes:
      - iotdb_data3:/iotdb/data
    depends_on:
      - iotdb-node1

  # Kafka集群用于高吞吐量数据传输
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka1:
    image: confluentinc/cp-kafka:latest
    container_name: kafka1
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper

  kafka2:
    image: confluentinc/cp-kafka:latest
    container_name: kafka2
    ports:
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:29093,PLAINTEXT_HOST://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper

  kafka3:
    image: confluentinc/cp-kafka:latest
    container_name: kafka3
    ports:
      - "9094:9094"
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka3:29094,PLAINTEXT_HOST://localhost:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper

  # MySQL主从复制集群
  mysql-master:
    image: mysql:8.0
    container_name: mysql_master
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: x_service
    volumes:
      - mysql_master_data:/var/lib/mysql
      - ./mysql-config/master.cnf:/etc/mysql/conf.d/master.cnf
    command: --server-id=1 --log-bin=mysql-bin --binlog-format=ROW

  mysql-slave:
    image: mysql:8.0
    container_name: mysql_slave
    ports:
      - "3307:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: x_service
    volumes:
      - mysql_slave_data:/var/lib/mysql
      - ./mysql-config/slave.cnf:/etc/mysql/conf.d/slave.cnf
    command: --server-id=2 --relay-log=relay-bin
    depends_on:
      - mysql-master

  # Redis集群
  redis-node1:
    image: redis:7.0
    container_name: redis_node1
    ports:
      - "6379:6379"
    volumes:
      - redis_data1:/data
      - ./redis-config/redis-node1.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf

  redis-node2:
    image: redis:7.0
    container_name: redis_node2
    ports:
      - "6380:6379"
    volumes:
      - redis_data2:/data
      - ./redis-config/redis-node2.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf

  redis-node3:
    image: redis:7.0
    container_name: redis_node3
    ports:
      - "6381:6379"
    volumes:
      - redis_data3:/data
      - ./redis-config/redis-node3.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf

  # 高性能数据收集服务集群
  data-collection-service1:
    build: ../x-data-collection-service
    container_name: data_collection_service1
    ports:
      - "8085:8085"
    environment:
      SPRING_PROFILES_ACTIVE: performance
      SPRING_IOTDB_URL: iotdb-node1
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka1:29092,kafka2:29093,kafka3:29094
    depends_on:
      - iotdb-node1
      - kafka1
      - mysql-master
    volumes:
      - ./app-config/data-collection1.yml:/app/config/application.yml

  data-collection-service2:
    build: ../x-data-collection-service
    container_name: data_collection_service2
    ports:
      - "8086:8085"
    environment:
      SPRING_PROFILES_ACTIVE: performance
      SPRING_IOTDB_URL: iotdb-node2
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka1:29092,kafka2:29093,kafka3:29094
    depends_on:
      - iotdb-node2
      - kafka1
      - mysql-master
    volumes:
      - ./app-config/data-collection2.yml:/app/config/application.yml

  data-collection-service3:
    build: ../x-data-collection-service
    container_name: data_collection_service3
    ports:
      - "8087:8085"
    environment:
      SPRING_PROFILES_ACTIVE: performance
      SPRING_IOTDB_URL: iotdb-node3
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka1:29092,kafka2:29093,kafka3:29094
    depends_on:
      - iotdb-node3
      - kafka1
      - mysql-master
    volumes:
      - ./app-config/data-collection3.yml:/app/config/application.yml

volumes:
  iotdb_data1:
  iotdb_data2:
  iotdb_data3:
  mysql_master_data:
  mysql_slave_data:
  redis_data1:
  redis_data2:
  redis_data3: